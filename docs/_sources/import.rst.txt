Exemple de mise en forme des données
====================================
Il est important de noter que les données populationnelles de base pour ce modèle provienennt de la Base de données de simulation de politiques sociales (BDSPS)
qui est produite par Statistiques Canada (https://www.statcan.gc.ca/fra/microsimulation/bdmsps/bdmsps). La BDSPS est une base non confidentielle, statistiquement 
représentative, de données sur des particuliers canadiens dans leur contexte familial, contenant suffisamment de renseignements sur chaque particulier pour calculer 
les impôts payés au gouvernement et les transferts de fonds versés par ce dernier.

La Base de données de simulation de politiques sociales (BDSPS) est disponible au moyen L'Initiative de démocratisation des données (IDD). 
Les professeurs et étudiants dans les établissements postsecondaires participants peuvent accéder au modèle par l'entremise de leurs contacts avec l'IDD.

Pour plus de renseignements sur le programme de l’IDD, consultez le site Web de l'Initiative de démocratisation des données (https://www.statcan.gc.ca/fra/idd/idd).

Dans cette section, on illustre comment effectuer la mise en forme des données provenant de la BDSPS, par contre le modèle pourrait fonctionner
avec une base de données différentes permettant une mise en forme identiques.

Une version de base des fichiers de départ est fournie dans le répertoire params, soit startpop.pkl et newimmpop.pkl, tous deux en format pickle. 



On utilise trois fonctions de simgen: 
* bdsps: manipule la base BDSPS
de Statistiques Canada pour mettre en forme certaines variables et créer
les registres avec NAS de dominants. 
* parse: reformule les noms de
variables à l’aide de dictionnaires 
* population: crée la structure de
population

.. code:: ipython3

    from simgen import bdsps, population, parse

Nettoyage de la BDSPS
---------------------

SimGen vient avec une fonction, bdsps qui nettoie les données de la
BDSPS, crée les NAS et les trois registres. Cette fonction peut être
adapté pour d’autres bases de données. Fait important à noter, la
fonction BDSPS calibre aussi les poids des répondants, par âge et sexe
pour s’arrimer sur la population québécoise de 2017, selon l’ISQ.

.. code:: ipython3

    hh,sp,kd = bdsps('../raw/bdsps2017.dta')

Voici ce à quoi ressemble les registres des dominants, conjoints et
enfants avant la mise en forme finale.

.. code:: ipython3

    hh.head()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>hhid</th>
          <th>age</th>
          <th>byr</th>
          <th>male</th>
          <th>immig</th>
          <th>newimm</th>
          <th>yrsimm</th>
          <th>educ4</th>
          <th>inschool</th>
          <th>married</th>
          <th>spflag</th>
          <th>wgt</th>
          <th>pn</th>
          <th>nkids</th>
        </tr>
        <tr>
          <th>nas</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0</td>
          <td>33</td>
          <td>1984</td>
          <td>True</td>
          <td>False</td>
          <td>False</td>
          <td>NaN</td>
          <td>none</td>
          <td>False</td>
          <td>False</td>
          <td>0</td>
          <td>397.943</td>
          <td>0</td>
          <td>2.0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0</td>
          <td>13</td>
          <td>2004</td>
          <td>False</td>
          <td>False</td>
          <td>False</td>
          <td>NaN</td>
          <td>none</td>
          <td>True</td>
          <td>False</td>
          <td>0</td>
          <td>414.793</td>
          <td>2</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0</td>
          <td>15</td>
          <td>2002</td>
          <td>True</td>
          <td>False</td>
          <td>False</td>
          <td>NaN</td>
          <td>none</td>
          <td>True</td>
          <td>False</td>
          <td>0</td>
          <td>450.728</td>
          <td>2</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>3</th>
          <td>1</td>
          <td>33</td>
          <td>1984</td>
          <td>True</td>
          <td>False</td>
          <td>False</td>
          <td>NaN</td>
          <td>none</td>
          <td>False</td>
          <td>False</td>
          <td>0</td>
          <td>398.808</td>
          <td>0</td>
          <td>2.0</td>
        </tr>
        <tr>
          <th>4</th>
          <td>1</td>
          <td>13</td>
          <td>2004</td>
          <td>False</td>
          <td>False</td>
          <td>False</td>
          <td>NaN</td>
          <td>none</td>
          <td>True</td>
          <td>False</td>
          <td>0</td>
          <td>415.695</td>
          <td>2</td>
          <td>0.0</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    sp.head()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>hhid</th>
          <th>age</th>
          <th>byr</th>
          <th>male</th>
          <th>immig</th>
          <th>newimm</th>
          <th>yrsimm</th>
          <th>educ4</th>
          <th>inschool</th>
          <th>married</th>
          <th>spflag</th>
          <th>wgt</th>
          <th>pn</th>
        </tr>
        <tr>
          <th>nas</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>21</th>
          <td>7</td>
          <td>39</td>
          <td>1978</td>
          <td>True</td>
          <td>False</td>
          <td>False</td>
          <td>NaN</td>
          <td>des</td>
          <td>False</td>
          <td>True</td>
          <td>1</td>
          <td>26.9994</td>
          <td>1</td>
        </tr>
        <tr>
          <th>22</th>
          <td>7</td>
          <td>47</td>
          <td>1970</td>
          <td>False</td>
          <td>False</td>
          <td>False</td>
          <td>NaN</td>
          <td>none</td>
          <td>False</td>
          <td>True</td>
          <td>1</td>
          <td>24.59</td>
          <td>0</td>
        </tr>
        <tr>
          <th>26</th>
          <td>8</td>
          <td>39</td>
          <td>1978</td>
          <td>True</td>
          <td>False</td>
          <td>False</td>
          <td>NaN</td>
          <td>des</td>
          <td>False</td>
          <td>True</td>
          <td>1</td>
          <td>26.9994</td>
          <td>1</td>
        </tr>
        <tr>
          <th>27</th>
          <td>8</td>
          <td>47</td>
          <td>1970</td>
          <td>False</td>
          <td>False</td>
          <td>False</td>
          <td>NaN</td>
          <td>none</td>
          <td>False</td>
          <td>True</td>
          <td>1</td>
          <td>24.59</td>
          <td>0</td>
        </tr>
        <tr>
          <th>31</th>
          <td>9</td>
          <td>39</td>
          <td>1978</td>
          <td>True</td>
          <td>False</td>
          <td>False</td>
          <td>NaN</td>
          <td>des</td>
          <td>False</td>
          <td>True</td>
          <td>1</td>
          <td>26.9994</td>
          <td>1</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    kd.head()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>hhid</th>
          <th>age</th>
          <th>byr</th>
          <th>male</th>
          <th>immig</th>
          <th>newimm</th>
          <th>yrsimm</th>
          <th>educ4</th>
          <th>inschool</th>
          <th>married</th>
          <th>spflag</th>
          <th>wgt</th>
          <th>pn</th>
          <th>nparents</th>
        </tr>
        <tr>
          <th>nas</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0</td>
          <td>13</td>
          <td>2004</td>
          <td>False</td>
          <td>False</td>
          <td>False</td>
          <td>NaN</td>
          <td>none</td>
          <td>True</td>
          <td>False</td>
          <td>0</td>
          <td>414.793</td>
          <td>2</td>
          <td>1</td>
        </tr>
        <tr>
          <th>0</th>
          <td>0</td>
          <td>15</td>
          <td>2002</td>
          <td>True</td>
          <td>False</td>
          <td>False</td>
          <td>NaN</td>
          <td>none</td>
          <td>True</td>
          <td>False</td>
          <td>0</td>
          <td>450.728</td>
          <td>2</td>
          <td>1</td>
        </tr>
        <tr>
          <th>3</th>
          <td>1</td>
          <td>13</td>
          <td>2004</td>
          <td>False</td>
          <td>False</td>
          <td>False</td>
          <td>NaN</td>
          <td>none</td>
          <td>True</td>
          <td>False</td>
          <td>0</td>
          <td>415.695</td>
          <td>2</td>
          <td>1</td>
        </tr>
        <tr>
          <th>3</th>
          <td>1</td>
          <td>15</td>
          <td>2002</td>
          <td>True</td>
          <td>False</td>
          <td>False</td>
          <td>NaN</td>
          <td>none</td>
          <td>True</td>
          <td>False</td>
          <td>0</td>
          <td>451.708</td>
          <td>2</td>
          <td>1</td>
        </tr>
        <tr>
          <th>6</th>
          <td>2</td>
          <td>13</td>
          <td>2004</td>
          <td>False</td>
          <td>False</td>
          <td>False</td>
          <td>NaN</td>
          <td>none</td>
          <td>True</td>
          <td>False</td>
          <td>0</td>
          <td>415.695</td>
          <td>2</td>
          <td>1</td>
        </tr>
      </tbody>
    </table>
    </div>



On partitionne pour obtenir seulement les nouveaux immigrants dans des
registres différents.

.. code:: ipython3

    imm = hh[hh.newimm]
    imm_nas = imm.index
    sp_imm = sp.loc[sp.index.isin(imm_nas),:]
    kd_imm = kd.loc[kd.index.isin(imm_nas),:]

Adapter les noms de variables pour SimGen
-----------------------------------------

Une étape importante est de faire la correspondance entre les noms de
variables des registres de la BDSPS et ceux dans SimGen. Pour ce faire,
nous avons la classe parse(). Cette classe permet, à l’aide d’un
dictionnaire de faire cette correspondance, pour chaque registre. Par
défaut, parse() suppose les mêmes noms de variables que dans SimGen.

.. code:: ipython3

    parsing = parse()
    parsing.map_hh




.. parsed-literal::

    {'wgt': 'wgt',
     'byr': 'byr',
     'male': 'male',
     'educ': 'educ',
     'insch': 'insch',
     'nkids': 'nkids',
     'married': 'married'}



On fait ensuite notre correspondance propre à la BDSPS.

.. code:: ipython3

    parsing.map_hh['educ'] = 'educ4'
    parsing.map_hh['insch'] = 'inschool'
    parsing.map_sp['educ'] = 'educ4'
    parsing.map_sp['insch'] = 'inschool'
    parsing.map_kd['insch'] = 'inschool'

On ajuste ensuite à l’aide de ces dictionnaires les trois registres.

.. code:: ipython3

    hh = parsing.dominants(hh)
    sp = parsing.spouses(sp)
    kd = parsing.kids(kd)

.. code:: ipython3

    hh.head()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>wgt</th>
          <th>byr</th>
          <th>male</th>
          <th>educ</th>
          <th>insch</th>
          <th>nkids</th>
          <th>married</th>
        </tr>
        <tr>
          <th>nas</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>397.942563</td>
          <td>1984</td>
          <td>True</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>2</td>
          <td>False</td>
        </tr>
        <tr>
          <th>1</th>
          <td>414.793316</td>
          <td>2004</td>
          <td>False</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0</td>
          <td>False</td>
        </tr>
        <tr>
          <th>2</th>
          <td>450.727786</td>
          <td>2002</td>
          <td>True</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0</td>
          <td>False</td>
        </tr>
        <tr>
          <th>3</th>
          <td>398.807655</td>
          <td>1984</td>
          <td>True</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>2</td>
          <td>False</td>
        </tr>
        <tr>
          <th>4</th>
          <td>415.695040</td>
          <td>2004</td>
          <td>False</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0</td>
          <td>False</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    imm = parsing.dominants(imm)
    sp_imm = parsing.spouses(sp_imm)
    kd_imm = parsing.kids(kd_imm)

Création des structures de population et sauvegarde des données
---------------------------------------------------------------

Après avoir ajusté les registres, on peut les introduire dans des
structures de population. La classe population permet de faire ceci. On
peut ensuite sauvegarder les objets en format pickle en donnant le nom
du fichier.

.. code:: ipython3

    pop = population()
    pop.input(hh,sp,kd)
    pop.save('startpop')

.. code:: ipython3

    newimm = population()
    newimm.input(imm,sp_imm,kd_imm)
    newimm.save('newimmpop')
